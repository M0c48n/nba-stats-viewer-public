name: CI/CD

on:
  push:

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_WEB: nba-stats-viewer-web
  ECR_REPOSITORY_NGINX: nba-stats-viewer-nginx
  ECS_SERVICE_WEB: nba-stats-viewer-WebService-twFzu7hF14mw
  ECS_SERVICE_NGINX: nba-stats-viewer-NginxService-Qo5FomjvIbZn
  ECS_CLUSTER: nba-stats-viewer
  ECS_TASK_DEFINITION_WEB: .aws/task_definitions/nba-stats-viewer-web_task-definition.json
  ECS_TASK_DEFINITION_NGINX: .aws/task_definitions/nba-stats-viewer-nginx_task-definition.json
  CONTAINER_NAME_WEB: web
  CONTAINER_NAME_NGINX: nginx

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up Python 
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: 3.8
  #   - name: Install Dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #   - name: Run Tests
  #     run: |
  #       cd src
  #       python manage.py test
  #     env:
  #       DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #       DEBUG: ${{ secrets.DEBUG }}
  #       SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #       X_RAPIDAPI_HOST: ${{ secrets.X_RAPIDAPI_HOST }}
  #       X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

  deploy:
    # needs: test
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Collect static files
        run: |
          cd src
          python manage.py collectstatic --noinput
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DEBUG: ${{ secrets.DEBUG }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          X_RAPIDAPI_HOST: ${{ secrets.X_RAPIDAPI_HOST }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # # Web container
      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image-web
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG -f Dockerfile.web .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" >> $GITHUB_ENV

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def-web
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION_WEB }}
      #     container-name: ${{ env.CONTAINER_NAME_WEB }}
      #     image: ${{ env.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def-web.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE_WEB }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true

      # Nginx container
      - name: Build, tag, and push image to Amazon ECR
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG -f Dockerfile.nginx .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NGINX:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_NGINX }}
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ env.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-nginx.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NGINX }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
